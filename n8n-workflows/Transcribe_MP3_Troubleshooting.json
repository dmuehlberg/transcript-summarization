{
  "name": "Transcribe MP3 Troubleshooting",
  "nodes": [
    {
      "parameters": {
        "fileSelector": "={{ $json.filePath }}",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        220,
        0
      ],
      "id": "734fdefa-b2b1-4d70-9bf1-8d87c1fec435",
      "name": "Read MP3 File"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "58b271c1-aac2-45fd-a8ef-509cbf7bd4dd",
              "name": "processId",
              "value": "=d0155205-c8fa-49fe-9b4f-052d7576ec61",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2200,
        0
      ],
      "id": "37e2dedb-1d94-4de6-9adf-c473a1de8c3b",
      "name": "Set processId"
    },
    {
      "parameters": {
        "url": "=http://{{ $json.transcriptionHostFinal }}:8000/task/{{ $json.processId }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2460,
        0
      ],
      "id": "6b529d3a-761b-41de-a490-685de8891661",
      "name": "Check Transcription Status"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.status }}",
                    "rightValue": "completed",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "a8aff566-1d2f-4f21-baf1-404feb3bf1fa"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "yes"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "71b69086-5fef-416f-a50f-7b1e58dc7fca",
                    "leftValue": "={{ $json.status }}",
                    "rightValue": "completed",
                    "operator": {
                      "type": "string",
                      "operation": "notEquals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "no"
            }
          ]
        },
        "options": {
          "allMatchingOutputs": true
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        2880,
        0
      ],
      "id": "66b89ff0-015e-4249-bc27-6ac2616a71b0",
      "name": "Transcription finished?"
    },
    {
      "parameters": {
        "amount": 1,
        "unit": "minutes"
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        3060,
        120
      ],
      "id": "22d4b9a9-ea77-4626-884d-0b1bce1ec8b7",
      "name": "Wait",
      "webhookId": "c4cc1ae4-5635-4d2d-babb-9811f32ffc54"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "51fe548a-cd88-4fdb-a5fe-e84b9bada7d0",
              "name": "transcription_start_time",
              "value": "={{ $json.metadata.start_time }}",
              "type": "string"
            },
            {
              "id": "81f699b7-fc67-4f3d-a40c-cd70cb869981",
              "name": "transcription_end_time",
              "value": "={{ $json.metadata.end_time }}",
              "type": "string"
            },
            {
              "id": "ad1d851b-45e9-42d8-9861-ba75693f4436",
              "name": "transcription_duration",
              "value": "={{ $json.metadata.duration }}",
              "type": "number"
            },
            {
              "id": "46376169-faf1-46a8-840b-f420c44ecbcd",
              "name": "transcription_language",
              "value": "={{ $json.metadata.language }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3320,
        -100
      ],
      "id": "ea081250-4b58-4516-9410-e113311cc440",
      "name": "Collect Transcription_Details"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.infrastructure }}",
                    "rightValue": "local",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "b0ee5b6b-a8c4-4c70-97c9-db2b37240129"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "local"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "6bd128e9-3f11-4f9f-9d3b-00c58887771f",
                    "leftValue": "={{ $json.infrastructure }}",
                    "rightValue": "remote",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "remote"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        880,
        0
      ],
      "id": "f2d9fafd-57c6-43c1-902d-910c5f7c6a9e",
      "name": "Switch"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "751ae51c-f328-43cb-8c4e-0626e11b3b68",
              "name": "baseFileName",
              "value": "={{ $json.fileName.split('/').pop().split('.')[0] }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        440,
        0
      ],
      "id": "1ffe6be4-7db9-488f-bc74-689524a39b7e",
      "name": "Set Filename"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "f462dde0-9383-42d6-bcb4-57769f422b58",
              "name": "infrastructure",
              "value": "remote",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        660,
        0
      ],
      "id": "bbdd7286-496f-4bb4-bb19-9b865f4b6caf",
      "name": "Set Infrastructure (Remote or Local)"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8d24504b-e43b-453d-8c32-b7640cc8cb65",
              "name": "transcriptionHost",
              "value": "whisperx",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1120,
        -60
      ],
      "id": "f17a2528-fc3e-46c6-bddd-226cd0c1768f",
      "name": "Set Local Transcription Host"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "25c5729e-a0c1-4f21-a1a9-61c49a74e9c3",
              "name": "transcriptionHost",
              "value": "192.168.0.49",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1120,
        140
      ],
      "id": "7212425d-e02d-4cbd-b5aa-f8f46a4e3b70",
      "name": "Set Remote Transcription Host"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=http://{{ $json.transcriptionHostFinal }}:8000/speech-to-text",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "device",
              "value": "cpu"
            },
            {
              "name": "model",
              "value": "large-v3"
            },
            {
              "name": "compute_type",
              "value": "int8"
            },
            {
              "name": "chunk_size",
              "value": "5"
            },
            {
              "name": "batch_size",
              "value": "2"
            }
          ]
        },
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "data"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "fullResponse": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1920,
        20
      ],
      "id": "2d4087c1-1bab-4d86-aa19-52ed1b8a5c4b",
      "name": "Start Transcription (Send HTTP POST)",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "jsCode": "// 1. Nimm das erste (und einzige) Item aus dem Merge-Node\nconst item = items[0].json;\nconst segments = item.result.segments;\n\n// 2. Hilfsfunktion: Sekunden → [HH:MM:SS.mmm]\nfunction formatTime(seconds) {\n  const totalMs = Math.floor(seconds * 1000);\n  const ms = totalMs % 1000;\n  const totalSec = Math.floor(totalMs / 1000);\n  const s = totalSec % 60;\n  const totalMin = Math.floor(totalSec / 60);\n  const m = totalMin % 60;\n  const h = Math.floor(totalMin / 60);\n  return `[${String(h).padStart(2,'0')}:` +\n         `${String(m).padStart(2,'0')}:` +\n         `${String(s).padStart(2,'0')}.` +\n         `${String(ms).padStart(3,'0')}]`;\n}\n\n// 3. Baue die Zeilen: Zeitstempel + Speaker + Text\nconst lines = segments.map(seg => {\n  const ts = formatTime(seg.start);\n  return `${ts} ${seg.speaker}:\\n${seg.text.trim()}`;\n});\n\n// 4. Füge zwischen die Blöcke jeweils eine Leerzeile ein\nconst transcriptFormatted = lines.join('\\n\\n');\n\n// 5. Gib das neue JSON-Objekt zurück\nreturn [{\n  json: {\n    status:     item.status,\n    transcript: transcriptFormatted,\n    segments:   segments,\n    metadata:   item.metadata,\n    error:      item.error,\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3540,
        -100
      ],
      "id": "2e066429-33d6-46f9-a1f4-6c78ad8965d4",
      "name": "Merge Transcript Segments"
    },
    {
      "parameters": {
        "jsCode": "// 1. JSON-Felder holen\nconst { transcript, baseFileName } = items[0].json;\n\n// 2. Binär‑Payload erstellen\nitems[0].binary = {\n  file: {\n    data: Buffer.from(transcript, 'utf-8'),\n    mimeType: 'text/plain',\n    fileName: `${baseFileName}.txt`,\n  }\n};\n\nreturn items;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3760,
        -100
      ],
      "id": "25ead5f2-edc3-429d-987d-3ed2b992a345",
      "name": "Prepare Binary File for Transcript"
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "=/data/shared/processing/2025-04-28 15-05-26.txt",
        "dataPropertyName": "file",
        "options": {
          "append": false
        }
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        3980,
        -100
      ],
      "id": "3d91b64b-93a0-416e-8296-f35af25c293b",
      "name": "Write Transcript TXT File to Disk"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \"fileName\": \"{{ $json.metadata.file_name }}\",\n  \"startTime\": \"{{ $json.metadata.start_time }}\",\n  \"endTime\": \"{{ $json.metadata.end_time }}\",\n  \"duration\": {{ $json.metadata.duration }},\n  \"language\": \"{{ $json.metadata.language }}\"\n}\n ",
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4200,
        -100
      ],
      "id": "49ee3bef-6e6a-49e7-9530-25c963e63ae7",
      "name": "Build JSON"
    },
    {
      "parameters": {
        "operation": "toJson",
        "binaryPropertyName": "file",
        "options": {
          "format": true,
          "fileName": "=2025-04-28 15-05-26.json"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        4420,
        -100
      ],
      "id": "b3e5098a-980c-4b23-a2c6-3fde5f2786d1",
      "name": "Convert to File"
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "=/data/shared/processing/2025-04-28 15-05-26.json",
        "dataPropertyName": "file",
        "options": {
          "append": false
        }
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        4640,
        -100
      ],
      "id": "f6db4934-2b85-4573-9c8a-97f984aaa3f5",
      "name": "Read/Write Files from Disk"
    },
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "filePath"
            },
            {
              "name": "baseFileName"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        0,
        0
      ],
      "id": "be80cc7c-da72-4717-b8d8-5cabd1d66fe4",
      "name": "When Executed by Another Workflow"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8e47d0cd-0456-4b80-8842-d8236176494a",
              "name": "transcriptionHostFinal",
              "value": "={{ $json.transcriptionHost }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1460,
        40
      ],
      "id": "4f32490d-941c-4bab-8b4a-adf0f85dac2f",
      "name": "Set Final Transcription Host"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9136f176-d6b1-4ef6-9d36-1d4b2e8d5c32",
              "name": "processId",
              "value": "={{ $('Set processId').item.json.body.identifier }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3280,
        120
      ],
      "id": "671d61d6-ef51-4ca4-bca1-58959b8afb10",
      "name": "Set Process ID"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        1780,
        -380
      ],
      "id": "a4977fce-096c-436e-a308-547e9a959edd",
      "name": "When clicking ‘Test workflow’"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8e47d0cd-0456-4b80-8842-d8236176494a",
              "name": "transcriptionHostFinal",
              "value": "=192.168.0.49",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2220,
        -400
      ],
      "id": "7b000233-6938-4820-898b-49b05714b992",
      "name": "Set Final Transcription Host1"
    }
  ],
  "pinData": {
    "When Executed by Another Workflow": [
      {
        "json": {
          "filePath": "/data/shared/2025-04-18 13-00-28.mp3"
        }
      },
      {
        "json": {
          "baseFileName": "2025-04-18 13-00-28"
        }
      }
    ]
  },
  "connections": {
    "Read MP3 File": {
      "main": [
        [
          {
            "node": "Set Filename",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set processId": {
      "main": [
        [
          {
            "node": "Check Transcription Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Transcription Status": {
      "main": [
        [
          {
            "node": "Transcription finished?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transcription finished?": {
      "main": [
        [
          {
            "node": "Collect Transcription_Details",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Set Process ID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Collect Transcription_Details": {
      "main": [
        [
          {
            "node": "Merge Transcript Segments",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Set Local Transcription Host",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Set Remote Transcription Host",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Filename": {
      "main": [
        [
          {
            "node": "Set Infrastructure (Remote or Local)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Infrastructure (Remote or Local)": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Local Transcription Host": {
      "main": [
        [
          {
            "node": "Set Final Transcription Host",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Remote Transcription Host": {
      "main": [
        [
          {
            "node": "Set Final Transcription Host",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Start Transcription (Send HTTP POST)": {
      "main": [
        []
      ]
    },
    "Merge Transcript Segments": {
      "main": [
        [
          {
            "node": "Prepare Binary File for Transcript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Binary File for Transcript": {
      "main": [
        [
          {
            "node": "Write Transcript TXT File to Disk",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Write Transcript TXT File to Disk": {
      "main": [
        [
          {
            "node": "Build JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build JSON": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File": {
      "main": [
        [
          {
            "node": "Read/Write Files from Disk",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read/Write Files from Disk": {
      "main": [
        []
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Read MP3 File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Final Transcription Host": {
      "main": [
        [
          {
            "node": "Start Transcription (Send HTTP POST)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Process ID": {
      "main": [
        [
          {
            "node": "Check Transcription Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "Set Final Transcription Host1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Final Transcription Host1": {
      "main": [
        [
          {
            "node": "Set processId",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "9bd1726c-bf37-42c0-80c9-fc6caed04f1f",
  "meta": {
    "instanceId": "6d4fe15f3d7a2136d5134243b845c1a09442b26a050f667c7ca033e72ef9ef63"
  },
  "id": "1S0kd5viQxw6j7zh",
  "tags": []
}