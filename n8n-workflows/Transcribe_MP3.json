{
  "name": "Transcribe MP3",
  "nodes": [
    {
      "parameters": {
        "fileSelector": "={{ $json.filePath }}",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        -5400,
        860
      ],
      "id": "33f8c7c5-cd1e-4ecf-af71-67124becff9a",
      "name": "Read MP3 File"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "58b271c1-aac2-45fd-a8ef-509cbf7bd4dd",
              "name": "processId",
              "value": "={{ $json.body.identifier }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -3420,
        860
      ],
      "id": "8a2a02a6-9e7d-4dda-86a6-9b7b64c56b2c",
      "name": "Set processId"
    },
    {
      "parameters": {
        "url": "=http://{{ $('Set Final Transcription Host').item.json.transcriptionHostFinal }}:8000/task/{{ $json.processId }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -3160,
        860
      ],
      "id": "8af470bc-3180-4a6e-92bf-3dc03d229179",
      "name": "Check Transcription Status"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.status }}",
                    "rightValue": "completed",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "a8aff566-1d2f-4f21-baf1-404feb3bf1fa"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "yes"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "71b69086-5fef-416f-a50f-7b1e58dc7fca",
                    "leftValue": "={{ $json.status }}",
                    "rightValue": "completed",
                    "operator": {
                      "type": "string",
                      "operation": "notEquals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "no"
            }
          ]
        },
        "options": {
          "allMatchingOutputs": true
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -2740,
        860
      ],
      "id": "1d80968b-a45c-4dac-8825-45c9054f2dbd",
      "name": "Transcription finished?"
    },
    {
      "parameters": {
        "amount": 15
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -2560,
        980
      ],
      "id": "2d4822e4-a833-42dd-96d4-36311d695313",
      "name": "Wait",
      "webhookId": "9bf9a2b6-5a69-42d7-99a2-0931e04bc858"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "51fe548a-cd88-4fdb-a5fe-e84b9bada7d0",
              "name": "transcription_start_time",
              "value": "={{ $json.metadata.start_time }}",
              "type": "string"
            },
            {
              "id": "81f699b7-fc67-4f3d-a40c-cd70cb869981",
              "name": "transcription_end_time",
              "value": "={{ $json.metadata.end_time }}",
              "type": "string"
            },
            {
              "id": "ad1d851b-45e9-42d8-9861-ba75693f4436",
              "name": "transcription_duration",
              "value": "={{ $json.metadata.duration }}",
              "type": "number"
            },
            {
              "id": "46376169-faf1-46a8-840b-f420c44ecbcd",
              "name": "transcription_language",
              "value": "={{ $json.metadata.language }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2300,
        760
      ],
      "id": "f9939bdc-ec76-46a9-ac90-36240c7f5977",
      "name": "Collect Transcription_Details"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.infrastructure }}",
                    "rightValue": "local",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "b0ee5b6b-a8c4-4c70-97c9-db2b37240129"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "local"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "6bd128e9-3f11-4f9f-9d3b-00c58887771f",
                    "leftValue": "={{ $json.infrastructure }}",
                    "rightValue": "remote",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "remote"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "b4456cb5-b856-468a-8ea7-2e0406615114",
                    "leftValue": "={{ $json.infrastructure }}",
                    "rightValue": "aws_t4",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "aws_t4"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "6f4391d7-9e2f-4ef0-8bce-bf7c77d9ad1a",
                    "leftValue": "={{ $json.infrastructure }}",
                    "rightValue": "aws_a10g",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "aws_a10g"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -4740,
        860
      ],
      "id": "5be31318-9287-4868-a4a8-937506641b63",
      "name": "Switch"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "f462dde0-9383-42d6-bcb4-57769f422b58",
              "name": "infrastructure",
              "value": "local",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -4960,
        860
      ],
      "id": "616285d0-8be8-421c-ac83-1240cde65b02",
      "name": "Set Infrastructure (Remote or Local)"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8d24504b-e43b-453d-8c32-b7640cc8cb65",
              "name": "transcriptionHost",
              "value": "whisperx",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -4500,
        800
      ],
      "id": "47191546-62f3-4c21-9dcf-9f6fd0379641",
      "name": "Set Local Transcription Host"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "25c5729e-a0c1-4f21-a1a9-61c49a74e9c3",
              "name": "transcriptionHost",
              "value": "192.168.0.91",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -4500,
        1000
      ],
      "id": "34b5d32d-8272-4025-b1a8-758b70034230",
      "name": "Set Remote Transcription Host"
    },
    {
      "parameters": {
        "jsCode": "// 1. Nimm das erste (und einzige) Item aus dem Merge-Node\nconst item = items[0].json;\nconst segments = item.result.segments;\n\n// 2. Hilfsfunktion: Sekunden → [HH:MM:SS.mmm]\nfunction formatTime(seconds) {\n  const totalMs = Math.floor(seconds * 1000);\n  const ms = totalMs % 1000;\n  const totalSec = Math.floor(totalMs / 1000);\n  const s = totalSec % 60;\n  const totalMin = Math.floor(totalSec / 60);\n  const m = totalMin % 60;\n  const h = Math.floor(totalMin / 60);\n  return `[${String(h).padStart(2,'0')}:` +\n         `${String(m).padStart(2,'0')}:` +\n         `${String(s).padStart(2,'0')}.` +\n         `${String(ms).padStart(3,'0')}]`;\n}\n\n// 3. Baue die Zeilen: Zeitstempel + Speaker + Text\nconst lines = segments.map(seg => {\n  const ts = formatTime(seg.start);\n  return `${ts} ${seg.speaker}:\\n${seg.text.trim()}`;\n});\n\n// 4. Füge zwischen die Blöcke jeweils eine Leerzeile ein\nconst transcriptFormatted = lines.join('\\n\\n');\n\n// 5. Gib das neue JSON-Objekt zurück\nreturn [{\n  json: {\n    status:     item.status,\n    transcript: transcriptFormatted,\n    segments:   segments,\n    metadata:   item.metadata,\n    error:      item.error,\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2080,
        760
      ],
      "id": "78bc55e4-1c60-4ca1-a264-a7873810e9fe",
      "name": "Merge Transcript Segments"
    },
    {
      "parameters": {
        "jsCode": "// 1. JSON-Felder holen\nconst { transcript, baseFileName } = items[0].json;\n\n// 2. Binär‑Payload erstellen\nitems[0].binary = {\n  file: {\n    data: Buffer.from(transcript, 'utf-8'),\n    mimeType: 'text/plain',\n    fileName: `${baseFileName}.txt`,\n  }\n};\n\nreturn items;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1860,
        760
      ],
      "id": "fd932d55-b00e-4973-a0eb-c0a9cde570c0",
      "name": "Prepare Binary File for Transcript"
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "={{ $('Set Filename, Path and Language').item.json.basePath }}/{{ $('Set Filename, Path and Language').item.json.baseFileName }}.txt",
        "dataPropertyName": "file",
        "options": {
          "append": false
        }
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        -1640,
        760
      ],
      "id": "d71526a0-6d95-4755-9d15-a7fbe4510d5f",
      "name": "Write Transcript TXT File to Disk"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \"fileName\": \"{{ $json.metadata.file_name }}\",\n  \"startTime\": \"{{ $json.metadata.start_time }}\",\n  \"endTime\": \"{{ $json.metadata.end_time }}\",\n  \"duration\": {{ $json.metadata.duration }},\n  \"language\": \"{{ $json.metadata.language }}\"\n}\n ",
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1420,
        760
      ],
      "id": "11814e41-efe6-4458-ba1c-74ff825d5a48",
      "name": "Build JSON"
    },
    {
      "parameters": {
        "operation": "toJson",
        "binaryPropertyName": "file",
        "options": {
          "format": true,
          "fileName": "={{ $('Set Filename, Path and Language').item.json.baseFileName }}.json"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -1200,
        760
      ],
      "id": "b1ad6abc-9497-41a5-b994-4ce907442c33",
      "name": "Convert to File"
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "={{ $('Set Filename, Path and Language').item.json.basePath }}/{{ $('Set Filename, Path and Language').item.json.baseFileName }}.json",
        "dataPropertyName": "file",
        "options": {
          "append": false
        }
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        -980,
        760
      ],
      "id": "d2c20549-6aca-4162-bb76-073adfc360d4",
      "name": "Read/Write Files from Disk"
    },
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "filePath"
            },
            {
              "name": "baseFileName"
            },
            {
              "name": "language"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -6500,
        860
      ],
      "id": "ec075000-f0eb-489c-a55c-dff5842a0843",
      "name": "When Executed by Another Workflow"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8e47d0cd-0456-4b80-8842-d8236176494a",
              "name": "transcriptionHostFinal",
              "value": "={{ $json.transcriptionHost }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -4160,
        900
      ],
      "id": "c4c8ef07-43e8-4a02-bdb9-33708906441d",
      "name": "Set Final Transcription Host"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9136f176-d6b1-4ef6-9d36-1d4b2e8d5c32",
              "name": "processId",
              "value": "={{ $('Set processId').item.json.body.identifier }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2340,
        980
      ],
      "id": "bc0a9a92-1ecc-4212-86c3-c0b642581c09",
      "name": "Set Process ID"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.infrastructure }}",
                    "rightValue": "local",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "b0ee5b6b-a8c4-4c70-97c9-db2b37240129"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "local"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "6bd128e9-3f11-4f9f-9d3b-00c58887771f",
                    "leftValue": "={{ $json.infrastructure }}",
                    "rightValue": "remote",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "remote"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "b4456cb5-b856-468a-8ea7-2e0406615114",
                    "leftValue": "={{ $json.infrastructure }}",
                    "rightValue": "aws_t4",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "aws_t4"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "74aa5bdb-3f08-4411-8198-286176e6ea12",
                    "leftValue": "={{ $json.infrastructure }}",
                    "rightValue": "aws_a10g",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "aws_a10g"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -3980,
        900
      ],
      "id": "252a61de-1e80-44a3-9792-a1e40b2271b3",
      "name": "Switch1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "25c5729e-a0c1-4f21-a1a9-61c49a74e9c3",
              "name": "transcriptionHost",
              "value": "3.70.137.226",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -4500,
        1220
      ],
      "id": "4f73f24b-bc73-4293-b7a6-b0e46c775b63",
      "name": "Set Remote AWS Transcription Host"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=http://{{ $json.transcriptionHostFinal }}:8000/speech-to-text",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "device",
              "value": "cuda"
            },
            {
              "name": "model",
              "value": "large-v3"
            },
            {
              "name": "compute_type",
              "value": "float16"
            },
            {
              "name": "chunk_size",
              "value": "30"
            },
            {
              "name": "batch_size",
              "value": "8"
            },
            {
              "name": "=language",
              "value": "={{ $json.language }}"
            }
          ]
        },
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "data"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "fullResponse": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -3700,
        1120
      ],
      "id": "7f5f9115-e3b0-4bf8-a7ae-9c5c5c6049af",
      "name": "Start Transcription on T4 GPU (Send HTTP POST)",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=http://{{ $json.transcriptionHostFinal }}:8000/speech-to-text",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "device",
              "value": "cpu"
            },
            {
              "name": "model",
              "value": "large-v3"
            },
            {
              "name": "compute_type",
              "value": "int8"
            },
            {
              "name": "chunk_size",
              "value": "5"
            },
            {
              "name": "batch_size",
              "value": "2"
            },
            {
              "name": "language",
              "value": "={{ $json.language }}"
            }
          ]
        },
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "data"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "fullResponse": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -3700,
        880
      ],
      "id": "2a3c9e8c-f5da-4ab5-a28b-a8c895514409",
      "name": "Start Local Transcription (Send HTTP POST)",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=http://{{ $json.transcriptionHostFinal }}:8000/speech-to-text",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "device",
              "value": "cuda"
            },
            {
              "name": "model",
              "value": "large-v3"
            },
            {
              "name": "compute_type",
              "value": "float32"
            },
            {
              "name": "chunk_size",
              "value": "30"
            },
            {
              "name": "batch_size",
              "value": "16"
            },
            {
              "name": "language",
              "value": "={{ $json.language }}"
            }
          ]
        },
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "data"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "fullResponse": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -3700,
        1380
      ],
      "id": "d6c9d434-1152-4864-a708-d9c6c7492ab0",
      "name": "Start Transcription on A10G GPU (Send HTTP POST)",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "751ae51c-f328-43cb-8c4e-0626e11b3b68",
              "name": "baseFileName",
              "value": "={{ $json.fileName.split('/').pop().split('.')[0] }}",
              "type": "string"
            },
            {
              "id": "37594e04-abec-4853-b1d1-ae1823da306b",
              "name": "basePath",
              "value": "={{ $('Merge').item.json.filePath.split('/').slice(0, -1).join('/') }}",
              "type": "string"
            },
            {
              "id": "73018d54-97a7-4256-b0c4-6d8fcea4405d",
              "name": "language",
              "value": "={{ $('Merge').item.json.language }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -5180,
        860
      ],
      "id": "5de8fa10-91c3-4899-a2b9-bd914edd7eae",
      "name": "Set Filename, Path and Language"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -6500,
        640
      ],
      "id": "5cd8aead-3376-4f75-9754-e648719de4ee",
      "name": "When clicking ‘Test workflow’"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        -5880,
        760
      ],
      "id": "2d8e7fba-8d39-4f59-9489-8ea42d6725a4",
      "name": "Merge"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "f5ad11e7-47a3-475e-aba3-475bda8128f5",
              "name": "filePath",
              "value": "/data/shared/transcription_processing/2025-06-17 16-36-00.mp3",
              "type": "string"
            },
            {
              "id": "d5fdb1e1-991e-4e49-ab56-30f93a572c1b",
              "name": "baseFileName",
              "value": "2025-06-17 16-36-00",
              "type": "string"
            },
            {
              "id": "a31a3588-45fc-4b8b-8dab-9575b84e9410",
              "name": "language",
              "value": "de",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -6280,
        640
      ],
      "id": "abf091bb-a268-40d3-b602-2c0c8f4caf22",
      "name": "Set filePath, baseFileName and language"
    }
  ],
  "pinData": {
    "When Executed by Another Workflow": [
      {
        "json": {
          "filePath": "/data/shared/transcription_processing/2025-06-17 16-36-00.mp3"
        }
      },
      {
        "json": {
          "baseFileName": "2025-06-17 16-36-00"
        }
      },
      {
        "json": {
          "language": "de"
        }
      }
    ]
  },
  "connections": {
    "Read MP3 File": {
      "main": [
        [
          {
            "node": "Set Filename, Path and Language",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set processId": {
      "main": [
        [
          {
            "node": "Check Transcription Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Transcription Status": {
      "main": [
        [
          {
            "node": "Transcription finished?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transcription finished?": {
      "main": [
        [
          {
            "node": "Collect Transcription_Details",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Set Process ID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Collect Transcription_Details": {
      "main": [
        [
          {
            "node": "Merge Transcript Segments",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Set Local Transcription Host",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Set Remote Transcription Host",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Set Remote AWS Transcription Host",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Set Remote AWS Transcription Host",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Infrastructure (Remote or Local)": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Local Transcription Host": {
      "main": [
        [
          {
            "node": "Set Final Transcription Host",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Remote Transcription Host": {
      "main": [
        [
          {
            "node": "Set Final Transcription Host",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Transcript Segments": {
      "main": [
        [
          {
            "node": "Prepare Binary File for Transcript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Binary File for Transcript": {
      "main": [
        [
          {
            "node": "Write Transcript TXT File to Disk",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Write Transcript TXT File to Disk": {
      "main": [
        [
          {
            "node": "Build JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build JSON": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File": {
      "main": [
        [
          {
            "node": "Read/Write Files from Disk",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Set Final Transcription Host": {
      "main": [
        [
          {
            "node": "Switch1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Process ID": {
      "main": [
        [
          {
            "node": "Check Transcription Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch1": {
      "main": [
        [
          {
            "node": "Start Local Transcription (Send HTTP POST)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Start Local Transcription (Send HTTP POST)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Start Transcription on T4 GPU (Send HTTP POST)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Start Transcription on A10G GPU (Send HTTP POST)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Remote AWS Transcription Host": {
      "main": [
        [
          {
            "node": "Set Final Transcription Host",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Start Transcription on T4 GPU (Send HTTP POST)": {
      "main": [
        [
          {
            "node": "Set processId",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Start Local Transcription (Send HTTP POST)": {
      "main": [
        [
          {
            "node": "Set processId",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Start Transcription on A10G GPU (Send HTTP POST)": {
      "main": [
        [
          {
            "node": "Set processId",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Filename, Path and Language": {
      "main": [
        [
          {
            "node": "Set Infrastructure (Remote or Local)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "Set filePath, baseFileName and language",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Read MP3 File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set filePath, baseFileName and language": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "406a890c-3ce3-4124-99f0-b7a6a45b1ece",
  "meta": {
    "instanceId": "e19a58ffb0fd248efa26d031fe3b9360ad1bd1b828d9ae749d875af6b5124b71"
  },
  "id": "Bq831QTbodw3b9Tv",
  "tags": []
}