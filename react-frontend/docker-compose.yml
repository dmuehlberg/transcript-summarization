version: '3.8'

services:
  # Frontend React App
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8400:8400"
    environment:
      - VITE_API_URL=http://localhost:8400/api
    depends_on:
      - backend
    networks:
      - transcript-network
    restart: unless-stopped

  # Backend Express Server
  backend:
    build:
      context: ./server
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-transcript_db}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      - N8N_URL=${N8N_URL:-http://n8n:5678}
      - N8N_API_KEY=${N8N_API_KEY:-}
    depends_on:
      - postgres
    networks:
      - transcript-network
    restart: unless-stopped
    volumes:
      - ./server/logs:/app/logs

  # PostgreSQL Database
  postgres:
    image: postgres:15
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-transcript_db}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - transcript-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  n8n_data:

networks:
  transcript-network:
    driver: bridge 