volumes:
  n8n_storage:
  postgres_storage:
  ollama_storage:
  qdrant_storage:
  open-webui:
  flowise:
  pgadmin_data:
  budibase_couchdb:
  budibase_redis:

networks:
  demo:

x-n8n: &service-n8n
  image: n8nio/n8n:latest
  networks: ['demo']
  environment:
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_HOST=postgres
    - DB_POSTGRESDB_USER=${POSTGRES_USER}
    - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
    - N8N_DIAGNOSTICS_ENABLED=false
    - N8N_PERSONALIZATION_ENABLED=false
    - N8N_ENCRYPTION_KEY
    - N8N_USER_MANAGEMENT_JWT_SECRET
  links:
    - postgres

x-ollama: &service-ollama
  image: ollama/ollama:latest
  container_name: ollama
  networks: ['demo']
  restart: unless-stopped
  ports:
    - 11434:11434
  volumes:
    - ollama_storage:/root/.ollama

x-init-ollama: &init-ollama
  image: ollama/ollama:latest
  networks: ['demo']
  container_name: ollama-pull-llama
  volumes:
    - ollama_storage:/root/.ollama
  entrypoint: /bin/sh
  command:
    - "-c"
    - "sleep 3; OLLAMA_HOST=ollama:11434 ollama pull llama3.1; OLLAMA_HOST=ollama:11434 ollama pull nomic-embed-text"

services:
  xstexport-service:
    platform: ${TARGETPLATFORM:-linux/amd64}
    build:
      context: ./xstexport-service
      dockerfile: Dockerfile
      args:
        - TARGETPLATFORM=${TARGETPLATFORM:-linux/amd64}
    container_name: xstexport-service
    networks: ['demo']
    ports:
      - "8200:8200"
    volumes:
      - ./data/ost:/data/ost
    environment:
      - DATABASE_URL=postgresql://root:postgres@postgres:5432/n8n
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${POSTGRES_DB}
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy

  flowise:
    image: flowiseai/flowise
    networks: ['demo']
    restart: unless-stopped
    container_name: flowise
    environment:
        - PORT=3001
    ports:
        - 3001:3001
    extra_hosts:
      - "host.docker.internal:host-gateway"        
    volumes:
        - ~/.flowise:/root/.flowise
    entrypoint: /bin/sh -c "sleep 3; flowise start"

  open-webui:
    image: ghcr.io/open-webui/open-webui:main
    networks: ['demo']
    restart: unless-stopped
    container_name: open-webui
    ports:
      - "3000:8080"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - open-webui:/app/backend/data

  postgres:
    image: postgres:16-alpine
    networks: ['demo']
    restart: unless-stopped
    container_name: postgres
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
    volumes:
      - postgres_storage:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 5s
      timeout: 5s
      retries: 10

  n8n-import:
    <<: *service-n8n
    container_name: n8n-import
    entrypoint: /bin/sh
    command:
      - "-c"
      - "n8n import:credentials --separate --input=/backup/credentials && n8n import:workflow --separate --input=/backup/workflows"
    volumes:
      - ./n8n/backup:/backup
    depends_on:
      postgres:
        condition: service_healthy

  n8n:
    <<: *service-n8n
    container_name: n8n
    restart: unless-stopped
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
    ports:
      - 5678:5678
    volumes:
      - n8n_storage:/home/node/.n8n
      - ./n8n/backup:/backup
      - ./shared:/data/shared
    depends_on:
      postgres:
        condition: service_healthy
      n8n-import:
        condition: service_completed_successfully

  qdrant:
    image: qdrant/qdrant
    container_name: qdrant
    networks: ['demo']
    restart: unless-stopped
    ports:
      - 6333:6333
    volumes:
      - qdrant_storage:/qdrant/storage

  ollama-cpu:
    profiles: ["cpu"]
    <<: *service-ollama

  ollama-gpu:
    profiles: ["gpu-nvidia"]
    <<: *service-ollama
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  ollama-pull-llama-cpu:
    profiles: ["cpu"]
    <<: *init-ollama
    depends_on:
      - ollama-cpu

  ollama-pull-llama-gpu:
    profiles: ["gpu-nvidia"]
    <<: *init-ollama
    depends_on:
      - ollama-gpu

  whisperx:
    build:
      context: ./whisperX-FastAPI
    container_name: whisperx
    networks: ['demo']
    ports:
      - "8000:8000"
    # volumes:
    #   - ./whisperx-service/app:/app
    environment:
      - DEVICE=cpu
      - HF_TOKEN=${HF_TOKEN}
      - DB_HOST=postgres
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_NAME=${POSTGRES_DB}
    depends_on:
      postgres:
        condition: service_healthy


  whisperx_cuda:
    build:
      context: ./whisperX-FastAPI-cuda
    container_name: whisperx-cuda
    networks: ['demo']
    ports:
      - "8000:8000"
    # volumes:
    #   - ./whisperx-service/app:/app
    runtime: nvidia
    environment:
      - DEVICE=cuda
      - HF_TOKEN=${HF_TOKEN}
      - DB_HOST=postgres
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_NAME=${POSTGRES_DB}
      - THREADS=56
      - OMP_NUM_THREADS=56
      - NUMBA_NUM_THREADS=56
      - MKL_NUM_THREADS=56
      - TF_INTRA_OP_PARALLELISM_THREADS=56
      - TF_INTER_OP_PARALLELISM_THREADS=4
      - LOGLEVEL=DEBUG
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
      # Nicht stören beim Debugging
      - PYTHONFAULTHANDLER=1
    depends_on:
      postgres:
        condition: service_healthy


  # pypff-service:
  #   platform: ${TARGETPLATFORM:-linux/amd64}
  #   build:
  #     context: ./pypff-service
  #     dockerfile: Dockerfile
  #   container_name: pypff-service
  #   networks: ['demo']
  #   ports:
  #     - "8100:8100"
  #   volumes:
  #     - ./data/ost:/data/ost


  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    networks: ['demo']
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@admin.com
      - PGADMIN_DEFAULT_PASSWORD=admin
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      postgres:
        condition: service_healthy

  processing-service:
    build:
      context: ./processing_service
    container_name: processing_service
    networks: ['demo']
    ports:
      - "8300:8300"
    env_file:
      - .env
    depends_on:
      - postgres
    volumes:
     - ./shared:/data/shared

  # Budibase Studio (Development/Admin Interface)
  budibase:
    image: budibase/budibase:latest
    container_name: budibase
    ports:
      - "8400:80"
    environment:
      - COUCH_DB_URL=${COUCHDB_URL}
      - REDIS_URL=redis://budibase-redis:6379
      - INTERNAL_API_KEY=super-secret-key
    depends_on:
      - budibase-couchdb
      - budibase-redis
    networks: ['demo']

  # Budibase Apps (Production/Public Mode) für Public Routing
  budibase-proxy:
    image: budibase/proxy
    container_name: budibase-proxy
    ports:
      - "10000:10000"  # Public App Modus!
    environment:
      - PUBLIC_APP=true
    depends_on:
      - budibase-apps
    networks: ['demo']

  budibase-apps:
    image: budibase/apps
    container_name: budibase-apps
    environment:
      - COUCH_DB_URL=${COUCHDB_URL}
      - REDIS_URL=redis://budibase-redis:6379
      - INTERNAL_API_KEY=super-secret-key
    depends_on:
      - budibase-couchdb
      - budibase-redis
    networks: ['demo']

  budibase-couchdb:
    image: couchdb:3
    container_name: budibase-couchdb
    environment:
      - COUCHDB_USER=${COUCHDB_USER}
      - COUCHDB_PASSWORD=${COUCHDB_PASSWORD}
    volumes:
      - budibase_couchdb:/opt/couchdb/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5984/"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: ['demo']

  budibase-redis:
    image: redis
    container_name: budibase-redis
    volumes:
      - budibase_redis:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks: ['demo']